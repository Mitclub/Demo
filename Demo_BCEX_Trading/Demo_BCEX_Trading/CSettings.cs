using System;
using System.IO;
using System.Configuration;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Demo_BCEX_Trading
{

    public class CSettings
    {
        #region public Members

        public static DateTime RefundDate;
        public static int RefundDateRange;
        public static double FloatRate;
        public static double RefundPartARate;
        public static double RefundPartBRate;
        public static double BaseRefundRate;
        public static double FloatRateMAX;
        public static double FloatRateMIN;
        public static double RefundRateMAX;
        public static double RefundRateMIN;
        public static string MITAccount;
        public static string MITFromAccount;

        //Test only
        public static double YesterdayTotalProfit;
        public static double TheDayBeforeYesterdayTotalProfit;
        public static string UserTransactionRecords;
        public static string UserHistoryTransactionRecords;
        public static string UserDataPath;
        public static string UserHistoryDataPath;

        public static List<MITUserTradeRecs> lstUsers = new List<MITUserTradeRecs>();
        public static List<MITUserTradeRecs> lstHistoryUsers = new List<MITUserTradeRecs>();
        #endregion

        public static void Init()
        {
           

            if (!DateTime.TryParse(ConfigurationManager.AppSettings["RefundDate"], out RefundDate))
            {
                RefundDate = DateTime.Now;
            }
            
            if (!int.TryParse(ConfigurationManager.AppSettings["RefundDateRange"], out RefundDateRange))
            {
                RefundDateRange = 0;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["FloatRate"], out FloatRate))
            {
                FloatRate = 0.1;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["RefundPartARate"], out RefundPartARate))
            {
                RefundPartARate = 0.6;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["RefundPartBRate"], out RefundPartBRate))
            {
                RefundPartBRate = 0.4;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["BaseRefundRate"], out BaseRefundRate))
            {
                BaseRefundRate = 0.5;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["FloatRateMAX"], out FloatRateMAX))
            {
                FloatRateMAX = 100;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["FloatRateMIN"], out FloatRateMIN))
            {
                FloatRateMIN = 0;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["RefundRateMAX"], out RefundRateMAX))
            {
                RefundRateMAX = 1;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["RefundRateMIN"], out RefundRateMIN))
            {
                RefundRateMIN = 0.2;
            }

            MITAccount = ConfigurationManager.AppSettings["MITAccount"];

            MITFromAccount = ConfigurationManager.AppSettings["MITFromAccount"];

            #region Print

            Console.WriteLine("------------------------------------初始化-----------------------------------\r\n");
            Console.WriteLine(string.Format("执行分红的时间: [{0}]", RefundDate.ToString()));

            Console.WriteLine(string.Format("基准浮动利率: [{0}]", FloatRate));

            Console.WriteLine(string.Format("基准分红利率: [{0}]", BaseRefundRate));

            Console.WriteLine(string.Format("浮动利率归一化最大值: [{0}]", FloatRateMAX));

            Console.WriteLine(string.Format("浮动利率归一化最小值: [{0}]", FloatRateMIN));

            Console.WriteLine(string.Format("分红利率最大值: [{0}]", RefundRateMAX));

            Console.WriteLine(string.Format("分红利率最小值: [{0}]", RefundRateMIN));

            Console.WriteLine(string.Format("当天分红分两个部分-A 给所有持币用户: [{0}]", RefundPartARate));

            Console.WriteLine(string.Format("当天分红分两个部分-B 给昨日交易用户额外分红: [{0}]", RefundPartBRate));

            Console.WriteLine(string.Format("项目方收入ETH的账号: [{0}]", MITAccount));

            Console.WriteLine(string.Format("项目方发送ETH的账号: [{0}]", MITFromAccount));
            #endregion

            if (!double.TryParse(ConfigurationManager.AppSettings["YesterdayTotalProfit"], out YesterdayTotalProfit))
            {
                YesterdayTotalProfit = 50;
            }

            if (!double.TryParse(ConfigurationManager.AppSettings["TheDayBeforeYesterdayTotalProfit"], out TheDayBeforeYesterdayTotalProfit))
            {
                TheDayBeforeYesterdayTotalProfit = 50;
            }

            UserTransactionRecords = ConfigurationManager.AppSettings["UserTransactionRecords"];
            UserHistoryTransactionRecords = ConfigurationManager.AppSettings["UserHistoryTransactionRecords"];

            String path = Environment.CurrentDirectory + UserTransactionRecords + "HistoryTradeRecords.txt";
            if (File.Exists(path))
            {
                File.Delete(path);
            }

            //Test only                
            Console.WriteLine("\r\n----------------------------------Test Only----------------------------------\r\n");
         
            Console.WriteLine(string.Format("获取用户交易记录的路径: [{0}]", UserTransactionRecords));

            Console.WriteLine();

           
        }

        public static void LoadData(int iDate)
        {
            try
            {
                lstUsers.Clear();
                Console.WriteLine("++++++++++++ 获取过去24小时用户所有交易数据 +++++++++++");
                UserDataPath = Environment.CurrentDirectory + UserTransactionRecords + "TradeRecords" + iDate.ToString() + ".txt";
                if (iDate == 100)
                {
                    BCEXData bd = new BCEXData();
                    bd.GetData(lstUsers);
                   
                }else
                {
                    GetUserTradeRecords(UserDataPath, lstUsers);
                }               
                
                Console.WriteLine();

                lstHistoryUsers.Clear();
                //获取用户所有历史权重交易数据
                Console.WriteLine("++++++++++++ 获取用户所有历史权重交易数据 +++++++++++");
                UserHistoryDataPath = Environment.CurrentDirectory + UserTransactionRecords + "HistoryTradeRecords.txt";
                GetUserTradeRecords(UserHistoryDataPath, lstHistoryUsers);
                Console.WriteLine();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }
        private static void GetUserTradeRecords(string path, List<MITUserTradeRecs> lstUsers)
        {
            if (File.Exists(path))
            {
                string jsonstring = File.ReadAllText(path);
                var jobject = JsonConvert.DeserializeObject<RootObject>(jsonstring);

                foreach (var user in jobject.Users)
                {
                    var userRecs = new MITUserTradeRecs();
                    userRecs.sUserID = user.sUserID;
                    userRecs.dBalance = user.dBalance;
                    Console.WriteLine("++++++++++++ " + user.sUserID + " +++++++++++");
                    foreach (var item in user.Records)
                    {
                        var recs = item.Convert();
                        if (recs.dtTradingTime > CSettings.RefundDate)
                        {
                            return;
                        }
                        userRecs.lstTradingRecs.Add(recs);
                        Console.WriteLine(recs.ToString());
                    }
                    lstUsers.Add(userRecs);
                }
            }
        }

        private static void GetDir(string path)
        {
            string extName = ".txt";
            string[] dir = Directory.GetDirectories(path); //文件夹列表   
            DirectoryInfo fdir = new DirectoryInfo(path);
            FileInfo[] file = fdir.GetFiles();

            if (file.Length != 0 || dir.Length != 0) //当前目录文件或文件夹不为空                   
            {
                foreach (FileInfo f in file) //显示当前目录所有文件   
                {
                    if (extName.ToLower().IndexOf(f.Extension.ToLower()) >= 0)
                    {
                        string[] data = File.ReadAllLines(f.FullName);
                        string sID = f.ToString();
                        lstUsers.Add(GetUserRecs(sID.Substring(0, sID.LastIndexOf('.')), data));
                    }
                }
            }
        }

        private static MITUserTradeRecs GetUserRecs(string sID, string[] data)
        {
            var user = new MITUserTradeRecs();
            user.sUserID = sID;

            string tmp = string.Empty;
            for (int i = 0; i < data.Length; i++)
            {
                tmp = data[i].Trim();
                if (string.IsNullOrEmpty(tmp) || tmp.IndexOf("//") >= 0)
                {
                    continue;
                }
                var temp = tmp.Split(',');
                if (temp.Length != 3)
                {
                    continue;
                }

                var recs = new TradingRecords();

                if (!double.TryParse(temp[0], out recs.dAmount))
                {
                    // Console.WriteLine(string.Format("错误！ 解析数量[{0}]", temp[0]));
                    continue;
                }
                if (recs.dAmount < 0)
                {
                    recs.enuTradeType = TRADETYPE.SELL;
                    recs.dAmount = Math.Abs(recs.dAmount);
                }
                else
                {
                    recs.enuTradeType = TRADETYPE.BUY;
                }
                if (!double.TryParse(temp[1], out recs.dPrice))
                {
                    Console.WriteLine(string.Format("错误！ 解析价格[{0}]", temp[1]));
                }

                if (!DateTime.TryParse(temp[2], out recs.dtTradingTime))
                {
                    Console.WriteLine(string.Format("错误！ 解析时间[{0}]", temp[2]));
                }

                user.lstTradingRecs.Add(recs);
            }
            return user;
        }

    }


    public class Record
    {
        public int RecID { get; set; }
        public string Type { get; set; }
        public double dPrice { get; set; }
        public double dAmount { get; set; }
        public string dtTradingTime { get; set; }

        public TradingRecords Convert()
        {
            var rec = new TradingRecords();

            rec.RecID = RecID;
            rec.dAmount = dAmount;
            rec.dPrice = dPrice;
            DateTime.TryParse(dtTradingTime, out rec.dtTradingTime);

            if (Type.Trim().ToUpper() == "BUY")
            {
                rec.enuTradeType = TRADETYPE.BUY;
            }
            else
            {
                rec.enuTradeType = TRADETYPE.SELL;
            }
            return rec;
        }
    }
    public class User
    {
        public string sUserID { get; set; }
        public int RecsSize { get; set; }
        public double dBalance { get; set; }
        public List<Record> Records { get; set; }

    }

    public class RootObject
    {
        public string FetchDataTime { get; set; }
        public int Nodesize { get; set; }
        public List<User> Users { get; set; }
    }

    public class BCEXData
    {
        public Dictionary<string, MITUserWeightRecs> GetHistory()
        {
            char[] cs = { '\r', '\n' };
            string[] array = history.Split(cs);
            var dic = new Dictionary<string, MITUserWeightRecs>();
            foreach (var item in array)
            {
                if (string.IsNullOrEmpty(item.Trim())) continue;

                string[] datas = item.Split(',');
                double  dn = 0.0, dp = 0.0;
                //id,transactionid,uid,created,number,price,addtime
                
                if (!dic.ContainsKey(datas[2].Trim()))
                {
                    var recs = new MITUserWeightRecs();
                    recs.sUserID = datas[2].Trim();

                    if (double.TryParse(datas[4].Trim(),out dn) &&
                        double.TryParse(datas[5].Trim(), out dp))
                    {
                        recs.dWeight += dn * dp;
                    }
                    dic.Add(datas[2].Trim(), recs);
                }
                else
                {
                    dic[datas[2].Trim()].dWeight += dn * dp;
                }
            }

            double dtotal = 0.0;
            foreach (KeyValuePair<string, MITUserWeightRecs> item in dic)
            {
                if (item.Value.dWeight <= 0.000000000001)
                {
                    Console.WriteLine("Weight is 0: " + item.Value.sUserID);
                }
                dtotal += item.Value.dWeight;
            }
            return dic;
        }

        public void GetData( List<MITUserTradeRecs> lstUsers)
        {
            char[] cs = { '\r','\n'};
            string[] array = data.Split(cs);
            Dictionary<string, List<TradingRecords>> dic = new Dictionary<string, List<TradingRecords>>();
            foreach (var item in array)
            {
                if (string.IsNullOrEmpty(item.Trim())) continue;

                string[] datas = item.Split(',');               
                
                var rec = new TradingRecords();
                if (!double.TryParse(datas[4], out rec.dPrice))
                {
                    Console.WriteLine("Error!!!");
                }
                if (!double.TryParse(datas[3],out rec.dAmount))
                {
                    Console.WriteLine("Error!!!");
                }
                if (rec.dAmount > 0 )
                {
                    rec.enuTradeType = TRADETYPE.BUY;
                }
                else
                {
                    rec.dAmount = Math.Abs(rec.dAmount);
                    rec.enuTradeType = TRADETYPE.SELL;
                }
                rec.dtTradingTime = GetTime(datas[2]);

                if (rec.dtTradingTime > CSettings.RefundDate)
                {
                    continue;
                }
                if (!dic.ContainsKey(datas[1].Trim()))
                {
                    List<TradingRecords> lst = new List<TradingRecords>();
                    lst.Add(rec);
                    dic.Add(datas[1].Trim(),lst);
                }
                else
                {
                    dic[datas[1].Trim()].Add(rec);
                }
            }
            //CMITRefundAPI2 api = new CMITRefundAPI2();
            //var userRecs1 = new MITUserTradeRecs();
            //userRecs1.sUserID = "569685";
            //if (dic.ContainsKey("569685"))
            //{
            //    foreach (var item in dic["569685"])
            //    {
            //        if (item.dtTradingTime > CSettings.RefundDate)
            //        {
            //            continue;
            //        }
            //        userRecs1.lstTradingRecs.Add(item);
            //    }
            //    api.TestWeight(CSettings.RefundDate, userRecs1);
            //}
            
            foreach (KeyValuePair<string, List<TradingRecords>> item in dic)
            {
                var userRecs = new MITUserTradeRecs();
                userRecs.sUserID = item.Key;

                foreach (var item2 in item.Value)
                {
                    if (item2.dtTradingTime > CSettings.RefundDate)
                    {
                        continue;
                    }
                    userRecs.lstTradingRecs.Add(item2);
                }
                lstUsers.Add(userRecs);
            }
        }
        public DateTime GetTime(string timeStamp)
        {
            DateTime dtStart = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1));

            long lTime = long.Parse(timeStamp + "0000000");
            TimeSpan toNow = new TimeSpan(lTime);
            return dtStart.Add(toNow);
        }
        public List<Tuple<string, string>> TestGetWeight()
        {
            var lst = new List<Tuple<string, string>>();
            int pos = 0;
            int pos1 = 0;
            char[] cs = { '\r', '\n' };
            string[] datas = weight.Split(cs);
            foreach (var item in datas)
            {
                if (string.IsNullOrEmpty(item.Trim())) continue;
                if (item.IndexOf("sUserID") < 0 || item.IndexOf("dWeight") < 0) continue;

                pos = item.IndexOf(">");
                pos1 = item.IndexOf("[", pos + 1);
                string sid = item.Substring(pos + 1, pos1 - pos - 1);

                pos = item.IndexOf(">", pos1 + 1);
                string sval = item.Substring(pos + 1);
                lst.Add(new Tuple<string, string>(sid, sval));
            }

            return lst;
        }
//id,transactionid,uid,created,number,price,addtime
        string history = @"210,29428428,105554,1537282212,9326.69,0.0000529,1537362000
211,29428429,105554,1537282212,82305,0.00005299,1537362000
212,29428430,105554,1537282212,166117.36,0.000053,1537362000
213,29416259,105554,1537275112,5884.91,0.000053,1537362000
214,29416163,105554,1537275037,34952.99,0.000053,1537362000
215,29416164,105554,1537275037,4450,0.000053,1537362000
216,29416165,105554,1537275037,356154.87,0.000053,1537362000
217,29416050,105554,1537274961,89600.68,0.0000525,1537362000
218,29416051,105554,1537274961,29577,0.00005264,1537362000
219,29416052,105554,1537274961,3174.77,0.0000527,1537362000
220,29416053,105554,1537274961,50000,0.00005298,1537362000
221,29416054,105554,1537274961,55000,0.00005299,1537362000
222,29504485,136020,1537332294,10000,0.000053,1537362000
223,29504979,198191,1537332554,464.71,0.000053,1537362000
224,29382462,218705,1537254434,1,0.0000495,1537362000
225,29528367,241241,1537346381,10000,0.00005051,1537362000
226,29406619,241241,1537268982,45000,0.0000515,1537362000
227,29398465,241241,1537264107,15000,0.0000488,1537362000
228,29517360,270371,1537339927,38715.07,0.00005195,1537362000
229,29431118,461939,1537283898,3000,0.000053,1537362000
230,29428657,461939,1537282379,2699.05,0.000053,1537362000
231,29449214,520931,1537295796,227,0.0000535,1537362000
232,29539099,536426,1537352498,100,0.00005177,1537362000
233,29502790,557134,1537331261,34229,0.000053,1537362000
234,29502767,557134,1537331243,38765,0.000053,1537362000
235,29502752,557134,1537331231,34268,0.000053,1537362000
236,29515227,568487,1537338687,394.67,0.00005316,1537362000
237,29506229,569685,1537333292,0,0.00005311,1537362000
238,29498571,588717,1537328704,81224.02,0.000053,1537362000
239,29498572,588717,1537328704,18775.98,0.000053,1537362000
240,29439010,618557,1537288950,19913.02,0.000053,1537362000
241,29437803,618557,1537288155,109870.7,0.000053,1537362000
242,29437573,618557,1537288003,11798.51,0.000053,1537362000
243,29432090,618557,1537284504,333,0.00005299,1537362000
244,29432091,618557,1537284504,333,0.00005298,1537362000
245,29432092,618557,1537284504,333,0.00005297,1537362000
246,29432093,618557,1537284504,333,0.00005296,1537362000
247,29432094,618557,1537284504,333,0.00005295,1537362000
248,29432095,618557,1537284504,333,0.00005294,1537362000
249,29431323,618557,1537284030,333,0.00005298,1537362000
250,29431324,618557,1537284030,333,0.00005297,1537362000
251,29431325,618557,1537284030,333,0.00005296,1537362000
252,29431326,618557,1537284030,333,0.00005295,1537362000
253,29431327,618557,1537284030,333,0.00005294,1537362000
254,29431328,618557,1537284030,333,0.00005293,1537362000
255,29421517,618557,1537278147,666,0.00005257,1537362000
256,29421490,618557,1537278134,666,0.00005259,1537362000
257,29421491,618557,1537278134,666,0.00005258,1537362000
258,29403462,618557,1537267163,563,0.000051,1537362000
259,29394101,618557,1537261534,13,0.00004817,1537362000
260,29394048,618557,1537261508,85,0.00004823,1537362000
261,29394049,618557,1537261508,666,0.00004822,1537362000
262,29394050,618557,1537261508,666,0.00004821,1537362000
263,29394051,618557,1537261508,666,0.0000482,1537362000
264,29394052,618557,1537261508,666,0.00004819,1537362000
265,29394054,618557,1537261508,666,0.00004818,1537362000
266,29394055,618557,1537261508,653,0.00004817,1537362000
267,29394014,618557,1537261488,2137,0.00004823,1537362000
268,29390901,618557,1537259549,300,0.00004772,1537362000
269,29390902,618557,1537259549,300,0.00004771,1537362000
270,29390903,618557,1537259549,300,0.0000477,1537362000
271,29386536,618557,1537256892,1000,0.00004921,1537362000
272,29386538,618557,1537256892,1000,0.00004913,1537362000
273,29386540,618557,1537256892,1000,0.00004912,1537362000
274,29386541,618557,1537256892,1000,0.00004911,1537362000
275,29386543,618557,1537256892,1000,0.0000491,1537362000
276,29386494,618557,1537256861,988,0.00004931,1537362000
277,29386499,618557,1537256861,1000,0.00004926,1537362000
278,29386500,618557,1537256861,1000,0.00004925,1537362000
279,29386502,618557,1537256861,1000,0.00004924,1537362000
280,29386503,618557,1537256861,1000,0.00004923,1537362000
281,29386254,618557,1537256713,988,0.00004991,1537362000
282,29450803,656506,1537296868,10000,0.0000535,1537362000
283,29449881,656506,1537296235,20000,0.0000535,1537362000
284,29435763,674389,1537286816,6331.18,0.000053,1537362000
285,29416992,674389,1537275565,4466.44,0.000053,1537362000
286,29381733,674389,1537254030,69288.61,0.000046,1537362000
287,29381679,674389,1537254014,10118.33,0.000045,1537362000
288,29555370,685799,1537361747,20000,0.0000535,1537362000
289,29515651,685799,1537338959,549.33,0.00005316,1537362000
290,29515652,685799,1537338959,1450.67,0.00005317,1537362000
291,56304,727724,1537240032,162206.91,0,1537362000
292,56301,736117,1537238049,15000.01,0,1537362000
293,29412548,759908,1537272823,5021,0.0000519,1537362000
294,29409500,759908,1537270877,888.46,0.00005132,1537362000
295,29407584,759908,1537269612,20000,0.00005198,1537362000
296,29403769,759908,1537267330,10000,0.00005077,1537362000
297,29397304,759908,1537263401,1000,0.0000488,1537362000
298,29396539,759908,1537262890,1000,0.000049,1537362000
299,29537135,759952,1537351346,666,0.00005071,1537362000
300,29536796,759952,1537351171,666,0.00005071,1537362000
301,29535916,759952,1537350716,7800,0.00005085,1537362000
302,29534347,759952,1537349870,3566,0.0000508,1537362000
303,29534348,759952,1537349870,11434,0.00005081,1537362000
304,29531949,759952,1537348523,22222,0.00005115,1537362000
305,29530866,759952,1537347864,5000,0.0000511,1537362000
306,29529516,759952,1537346994,8000,0.0000501,1537362000
307,29416573,759952,1537275319,30000,0.000053,1537362000
308,29416366,759952,1537275221,80000,0.000053,1537362000
309,29416307,759952,1537275156,60000,0.000053,1537362000
310,29414903,759952,1537274238,14280,0.0000525,1537362000
311,29555395,760077,1537361761,8900,0.0000535,1537362000
312,29555134,760077,1537361625,3660.34,0.0000535,1537362000
313,29555135,760077,1537361625,29708.66,0.0000535,1537362000
314,29552438,760077,1537360114,909.64,0.0000535,1537362000
315,29552439,760077,1537360114,7745.35,0.0000535,1537362000
316,29552440,760077,1537360114,245.01,0.0000535,1537362000
317,29551409,760077,1537359528,6129.64,0.0000535,1537362000
318,29551410,760077,1537359528,2770.36,0.0000535,1537362000
319,29550593,760077,1537359078,7929.64,0.0000535,1537362000
320,29550594,760077,1537359078,7070.36,0.0000535,1537362000
321,29549603,760077,1537358563,57565.1,0.00005346,1537362000
322,29549604,760077,1537358563,2434.9,0.00005321,1537362000
323,29549581,760077,1537358549,5650,0.00005346,1537362000
324,29548388,760077,1537357876,5309.36,0.0000535,1537362000
325,29548389,760077,1537357876,8888,0.0000535,1537362000
326,29548390,760077,1537357876,12546.28,0.0000535,1537362000
327,29548391,760077,1537357876,6625.36,0.0000535,1537362000
328,29547114,760077,1537357195,10000,0.00005346,1537362000
329,29547023,760077,1537357150,15000,0.0000535,1537362000
330,29546636,760077,1537356951,37389,0.0000535,1537362000
331,29546582,760077,1537356913,13214.25,0.0000535,1537362000
332,29546502,760077,1537356872,7549.56,0.0000535,1537362000
333,29546463,760077,1537356851,5000,0.0000535,1537362000
334,29546445,760077,1537356839,999,0.0000535,1537362000
335,29546436,760077,1537356832,999,0.0000535,1537362000
336,29546428,760077,1537356828,518,0.0000535,1537362000
337,29546421,760077,1537356822,210,0.0000535,1537362000
338,29546409,760077,1537356813,5500,0.0000535,1537362000
339,29546361,760077,1537356789,3369,0.0000535,1537362000
340,29546349,760077,1537356785,13125.77,0.0000535,1537362000
341,29546315,760077,1537356764,5888.98,0.0000535,1537362000
342,29546285,760077,1537356747,8700,0.0000535,1537362000
343,29546279,760077,1537356745,9852,0.0000535,1537362000
344,29546257,760077,1537356736,12119.05,0.0000535,1537362000
345,29546185,760077,1537356683,11000,0.0000535,1537362000
346,29546149,760077,1537356666,8900,0.0000535,1537362000
347,29546150,760077,1537356666,2269,0.0000535,1537362000
348,29546133,760077,1537356660,1236,0.0000535,1537362000
349,29546126,760077,1537356656,666,0.0000535,1537362000
350,29546112,760077,1537356650,11230,0.0000535,1537362000
351,29546099,760077,1537356645,3260,0.0000535,1537362000
352,29546080,760077,1537356636,6600,0.0000535,1537362000
353,29546042,760077,1537356620,23500,0.0000535,1537362000
354,29545838,760077,1537356501,12000,0.0000535,1537362000
355,29545723,760077,1537356427,65000,0.0000535,1537362000
356,29545703,760077,1537356408,5000,0.0000535,1537362000
357,29545572,760077,1537356339,11160,0.0000535,1537362000
358,29545514,760077,1537356316,39720.9,0.0000532,1537362000
359,29545515,760077,1537356316,14500,0.00005332,1537362000
360,29545516,760077,1537356316,22564,0.00005345,1537362000
361,29545194,760077,1537356157,8500,0.0000532,1537362000
362,29544699,760077,1537355854,10000,0.000053,1537362000
363,29544500,760077,1537355750,787,0.000053,1537362000
364,29544402,760077,1537355706,38938,0.000053,1537362000
365,29544248,760077,1537355590,7782,0.00005284,1537362000
366,29544164,760077,1537355546,6560,0.00005284,1537362000
367,29544093,760077,1537355499,35000,0.000053,1537362000
368,29543999,760077,1537355418,12500,0.000053,1537362000
369,29543876,760077,1537355348,5451,0.000053,1537362000
370,29543809,760077,1537355323,8000,0.000053,1537362000
371,29543711,760077,1537355266,22596.21,0.00005284,1537362000
372,29543673,760077,1537355242,28266.64,0.00005278,1537362000
373,29543641,760077,1537355225,30196.21,0.00005255,1537362000
374,29543331,760077,1537355062,11400,0.00005255,1537362000
375,29543096,760077,1537354901,4110.63,0.00005235,1537362000
376,29542876,760077,1537354788,2300,0.0000522,1537362000
377,29542803,760077,1537354737,1566.79,0.00005249,1537362000
378,29542804,760077,1537354737,5842.58,0.00005235,1537362000
379,29542681,760077,1537354670,29850,0.00005249,1537362000
380,29542411,760077,1537354533,11000,0.00005249,1537362000
381,29542173,760077,1537354407,1000,0.00005255,1537362000
382,29542133,760077,1537354372,15383.21,0.00005249,1537362000
383,29542052,760077,1537354301,8888,0.00005249,1537362000
384,29541822,760077,1537354150,19500,0.00005249,1537362000
385,29541617,760077,1537354049,13125,0.00005249,1537362000
386,29541523,760077,1537353975,2103.8,0.00005249,1537362000
387,29541484,760077,1537353950,1789,0.00005235,1537362000
388,29541388,760077,1537353907,15000,0.00005249,1537362000
389,29541313,760077,1537353828,10361.1,0.00005249,1537362000
390,29541107,760077,1537353699,5368.42,0.00005235,1537362000
391,29540973,760077,1537353620,34671.04,0.000052,1537362000
392,29540819,760077,1537353528,10000,0.000052,1537362000
393,29540743,760077,1537353474,25000,0.000052,1537362000
394,29540618,760077,1537353414,18000,0.000052,1537362000
395,29540493,760077,1537353363,9942.51,0.000052,1537362000
396,29540494,760077,1537353363,25057.49,0.000052,1537362000
397,29540435,760077,1537353319,6339.74,0.00005195,1537362000
398,29540436,760077,1537353319,3660.26,0.000052,1537362000
399,29540256,760077,1537353204,4011,0.00005177,1537362000
400,29540257,760077,1537353204,289,0.00005195,1537362000
401,29539720,760077,1537352872,17534,0.00005151,1537362000
402,29539721,760077,1537352872,466,0.00005135,1537362000
403,29539425,760077,1537352699,8000,0.00005177,1537362000
404,29538882,760077,1537352352,12046,0.00005149,1537362000
405,29538861,760077,1537352340,404.62,0.00005135,1537362000
406,29538859,760077,1537352339,7850,0.00005149,1537362000
407,29538659,760077,1537352221,14076.36,0.00005133,1537362000
408,29538423,760077,1537352109,9191,0.00005133,1537362000
409,29538136,760077,1537351928,11441,0.00005133,1537362000
410,29537949,760077,1537351793,14621.26,0.00005115,1537362000
411,29537950,760077,1537351793,5378.74,0.00005133,1537362000
412,29537717,760077,1537351675,4926.47,0.00005085,1537362000
413,29537718,760077,1537351675,1695,0.000051,1537362000
414,29537159,760077,1537351378,3000,0.00005085,1537362000
415,29536515,760077,1537351023,41.47,0.00005085,1537362000
416,29536516,760077,1537351023,3223.53,0.00005085,1537362000
417,29535784,760077,1537350630,7805,0.00005085,1537362000
418,29535647,760077,1537350543,6000,0.00005085,1537362000
419,29535482,760077,1537350489,1343.53,0.00005085,1537362000
420,29534727,760077,1537350080,1781.47,0.00005081,1537362000
421,29534107,760077,1537349759,1100,0.0000508,1537362000
422,29533599,760077,1537349444,1100,0.00005082,1537362000
423,29533520,760077,1537349415,1100,0.00005089,1537362000
424,29532710,760077,1537348982,9850,0.00005081,1537362000
425,29532693,760077,1537348967,3251.8,0.00005081,1537362000
426,29532694,760077,1537348967,1293.2,0.00005081,1537362000
427,29532588,760077,1537348894,7540,0.00005081,1537362000
428,29532235,760077,1537348667,4998,0.00005081,1537362000
429,29532176,760077,1537348632,4000,0.00005081,1537362000
430,29531800,760077,1537348420,1133.8,0.0000511,1537362000
431,29531801,760077,1537348420,2866.2,0.00005081,1537362000
432,29531675,760077,1537348348,3125,0.00005133,1537362000
433,29531290,760077,1537348111,67.3,0.0000511,1537362000
434,29530683,760077,1537347727,656,0.0000511,1537362000
435,29530379,760077,1537347529,4276.7,0.00005114,1537362000
436,29530366,760077,1537347517,2792.44,0.0000505,1537362000
437,29530367,760077,1537347517,7140.09,0.00005051,1537362000
438,29530368,760077,1537347517,1921.38,0.00005097,1537362000
439,29530369,760077,1537347517,3869.39,0.00005114,1537362000
440,29528645,760077,1537346505,19973.02,0.00005025,1537362000
441,29528646,760077,1537346505,26.98,0.00005005,1537362000
442,29528630,760077,1537346493,18022.98,0.00005025,1537362000
443,29528569,760077,1537346460,20025.54,0.00005025,1537362000
444,29528405,760077,1537346402,5207.56,0.0000505,1537362000
445,29528170,760077,1537346272,1588,0.00005074,1537362000
446,29527709,760077,1537346008,5050,0.00005097,1537362000
447,29527689,760077,1537345997,5656,0.00005097,1537362000
448,29527265,760077,1537345713,8512,0.000051,1537362000
449,29527219,760077,1537345692,3000,0.00005114,1537362000
450,29526050,760077,1537344997,4542,0.00005114,1537362000
451,29525833,760077,1537344893,1985,0.00005114,1537362000
452,29525674,760077,1537344784,1923.39,0.000051,1537362000
453,29525675,760077,1537344784,61.61,0.00005114,1537362000
454,29525536,760077,1537344681,12000,0.000051,1537362000
455,29525227,760077,1537344511,6561,0.000051,1537362000
456,29523978,760077,1537343735,8512,0.000051,1537362000
457,29523601,760077,1537343488,6561,0.000051,1537362000
458,29522754,760077,1537342997,11113,0.000051,1537362000
459,29522250,760077,1537342731,8000,0.00005074,1537362000
460,29521931,760077,1537342557,4450,0.00005074,1537362000
461,29521404,760077,1537342219,9588,0.000051,1537362000
462,29520797,760077,1537341893,4450,0.000051,1537362000
463,29520084,760077,1537341463,3466.48,0.00005077,1537362000
464,29520085,760077,1537341463,688.52,0.000051,1537362000
465,29519877,760077,1537341350,1449.44,0.0000505,1537362000
466,29519427,760077,1537341089,7878,0.00005077,1537362000
467,29519193,760077,1537340964,7878,0.00005077,1537362000
468,29518872,760077,1537340782,4456,0.0000505,1537362000
469,29518786,760077,1537340740,11250,0.00005077,1537362000
470,29518573,760077,1537340625,5656,0.00005077,1537362000
471,29518555,760077,1537340609,2300,0.00005077,1537362000
472,29518088,760077,1537340333,33048.77,0.0000505,1537362000
473,29518089,760077,1537340333,2951.23,0.00005077,1537362000
474,29517981,760077,1537340253,42461.77,0.0000503,1537362000
475,29517982,760077,1537340253,1538.23,0.0000505,1537362000
476,29517944,760077,1537340234,17391.46,0.00004989,1537362000
477,29517945,760077,1537340234,24587,0.00005012,1537362000
478,29517917,760077,1537340221,32920.83,0.00004999,1537362000
479,29517918,760077,1537340221,19820,0.00004989,1537362000
480,29517821,760077,1537340174,17000,0.00005025,1537362000
481,29517822,760077,1537340174,23797.5,0.00005005,1537362000
482,29517823,760077,1537340174,15255.62,0.00004999,1537362000
483,29517824,760077,1537340174,14079.17,0.00004999,1537362000
484,29517795,760077,1537340164,6454,0.0000508,1537362000
485,29517796,760077,1537340164,2545,0.00005077,1537362000
486,29517797,760077,1537340164,17984.2,0.00005055,1537362000
487,29517798,760077,1537340164,23540,0.00005039,1537362000
488,29517799,760077,1537340164,524.75,0.0000503,1537362000
489,29517631,760077,1537340083,2015.8,0.0000505,1537362000
490,29517584,760077,1537340060,11004,0.000051,1537362000
491,29517585,760077,1537340060,4860,0.00005088,1537362000
492,29517586,760077,1537340060,2860,0.00005088,1537362000
493,29517587,760077,1537340060,6920.2,0.00005066,1537362000
494,29517588,760077,1537340060,2340,0.00005055,1537362000
495,29517589,760077,1537340060,10000,0.0000505,1537362000
496,29517511,760077,1537340020,59415,0.0000515,1537362000
497,29517512,760077,1537340020,16689,0.00005149,1537362000
498,29517496,760077,1537340012,9415,0.00005166,1537362000
499,29517497,760077,1537340012,3000,0.00005166,1537362000
500,29517498,760077,1537340012,23585,0.0000515,1537362000
501,29517401,760077,1537339948,16985,0.00005177,1537362000
502,29517402,760077,1537339948,13015,0.00005166,1537362000
503,29517261,760077,1537339870,4000,0.00005215,1537362000
504,29517262,760077,1537339870,12397.23,0.00005205,1537362000
505,29517222,760077,1537339850,2788.42,0.00005235,1537362000
506,29517223,760077,1537339850,211.58,0.00005235,1537362000
507,29517138,760077,1537339814,8217.58,0.00005251,1537362000
508,29517139,760077,1537339814,4574,0.00005235,1537362000
509,29517107,760077,1537339805,4234,0.00005278,1537362000
510,29517019,760077,1537339750,14016.58,0.00005277,1537362000
511,29517020,760077,1537339750,2983.42,0.00005251,1537362000
512,29516876,760077,1537339685,2287.66,0.0000529,1537362000
513,29516877,760077,1537339685,22184.92,0.0000528,1537362000
514,29516878,760077,1537339685,2527.42,0.00005277,1537362000
515,29516858,760077,1537339670,1483.37,0.000053,1537362000
516,29516859,760077,1537339670,516.63,0.00005317,1537362000
517,29516851,760077,1537339661,1712.34,0.0000529,1537362000
518,29516786,760077,1537339619,14500,0.00005287,1537362000
519,29516787,760077,1537339619,1026.92,0.00005284,1537362000
520,29516788,760077,1537339619,1473.08,0.0000528,1537362000
521,29516767,760077,1537339604,2633.66,0.00005292,1537362000
522,29516768,760077,1537339604,12654,0.00005292,1537362000
523,29515826,760077,1537339053,11084.64,0.000053,1537362000
524,29515165,760077,1537338654,12545,0.00005316,1537362000
525,29515109,760077,1537338627,5221,0.00005316,1537362000
526,29514977,760077,1537338565,4547,0.00005316,1537362000
527,29514946,760077,1537338549,6500,0.00005311,1537362000
528,29514947,760077,1537338549,500,0.000053,1537362000
529,29514914,760077,1537338536,1743,0.00005316,1537362000
530,29514825,760077,1537338466,545,0.00005316,1537362000
531,29514818,760077,1537338460,456,0.00005316,1537362000
532,29514813,760077,1537338457,456,0.00005316,1537362000
533,29513975,760077,1537338004,9500,0.00005317,1537362000
534,29513500,760077,1537337686,3211.1,0.0000532,1537362000
535,29513161,760077,1537337461,5000,0.0000532,1537362000
536,29512878,760077,1537337324,1000,0.00005318,1537362000
537,29512879,760077,1537337324,1500,0.00005317,1537362000
538,29511984,760077,1537336777,21161.9,0.00005325,1537362000
539,29511985,760077,1537336777,1254,0.00005325,1537362000
540,29511798,760077,1537336644,9900,0.00005332,1537362000
541,29511366,760077,1537336431,11000,0.0000533,1537362000
542,29511367,760077,1537336431,1454,0.00005325,1537362000
543,29510980,760077,1537336178,11000,0.00005332,1537362000
544,29510446,760077,1537335892,2198.72,0.0000533,1537362000
545,29510447,760077,1537335892,801.28,0.00005325,1537362000
546,29510183,760077,1537335735,10251.28,0.0000533,1537362000
547,29509744,760077,1537335459,4972.18,0.00005325,1537362000
548,29509745,760077,1537335459,582.82,0.00005325,1537362000
549,29509630,760077,1537335404,1859.72,0.0000533,1537362000
550,29509501,760077,1537335315,8584.72,0.0000533,1537362000
551,29509502,760077,1537335315,5000,0.0000533,1537362000
552,29509277,760077,1537335178,4521.33,0.0000533,1537362000
553,29509131,760077,1537335072,12111.17,0.0000533,1537362000
554,29508966,760077,1537334985,4527.82,0.00005325,1537362000
555,29508850,760077,1537334903,9700,0.0000533,1537362000
556,29508711,760077,1537334812,7000,0.00005325,1537362000
557,29508457,760077,1537334684,10098.62,0.0000533,1537362000
558,29508192,760077,1537334519,7000,0.0000533,1537362000
559,29507921,760077,1537334348,5984.16,0.0000533,1537362000
560,29507665,760077,1537334192,5000,0.00005325,1537362000
561,29507407,760077,1537334044,2877.94,0.00005318,1537362000
562,29497854,760171,1537328242,20000,0.000053,1537362000
563,29489340,760171,1537323153,20000,0.000053,1537362000
564,29438502,760171,1537288602,842,0.000053,1537362000
565,29438482,760171,1537288595,89000,0.000053,1537362000
566,29418588,760171,1537276514,100943,0.000053,1537362000
567,29418464,760171,1537276438,50000,0.000053,1537362000
568,29417567,760171,1537275900,57510,0.000053,1537362000
569,29417167,760171,1537275655,94000,0.000053,1537362000
570,29416379,760171,1537275237,370,0.000053,1537362000
571,29407021,760171,1537269254,51390.3,0.000052,1537362000
572,29407022,760171,1537269254,18609.7,0.000052,1537362000
573,29406963,760171,1537269210,19800,0.00005198,1537362000
574,29406948,760171,1537269199,17000,0.00005198,1537362000
575,29406742,760171,1537269055,24000,0.00005185,1537362000
576,29406743,760171,1537269055,41351,0.0000522,1537362000
577,29406744,760171,1537269055,21351,0.0000522,1537362000
578,29406745,760171,1537269055,8025.08,0.0000522,1537362000
579,29533613,760175,1537349447,8442.86,0.00005081,1537362000
580,29533600,760175,1537349444,2550.54,0.00005081,1537362000
581,29528065,760175,1537346202,3060.58,0.00005075,1537362000
582,29527713,760175,1537346011,5122.62,0.00005097,1537362000
583,29526373,760175,1537345179,7750,0.00005075,1537362000
584,29524498,760175,1537344049,3962.75,0.00005075,1537362000
585,29524499,760175,1537344049,113.56,0.00005075,1537362000
586,29524470,760175,1537344040,3320,0.00005075,1537362000
587,29522916,760175,1537343106,767.58,0.000051,1537362000
588,29522917,760175,1537343106,10103.01,0.000051,1537362000
589,29508965,760175,1537334985,2127.5,0.00005325,1537362000
590,29508921,760175,1537334952,8700,0.00005325,1537362000
591,29508785,760175,1537334857,11235.24,0.00005325,1537362000
592,29508712,760175,1537334812,999,0.00005325,1537362000
593,29507468,760175,1537334085,5268.13,0.00005319,1537362000
594,29504946,760175,1537332537,11861.88,0.00005296,1537362000
595,29504750,760175,1537332421,25640,0.00005296,1537362000
596,29504724,760175,1537332404,7454,0.00005296,1537362000
597,29503513,760175,1537331729,29066.29,0.000053,1537362000
598,29501798,760175,1537330671,3000,0.000053,1537362000
599,29501494,760175,1537330487,3562,0.000053,1537362000
600,29500786,760175,1537330054,2067,0.000053,1537362000
601,29499018,760175,1537328951,888,0.000053,1537362000
602,29498963,760175,1537328928,2141,0.000053,1537362000
603,29497412,760175,1537327986,11255.36,0.00005293,1537362000
604,29497137,760175,1537327801,9793,0.00005293,1537362000
605,29497006,760175,1537327716,5460,0.00005293,1537362000
606,29496530,760175,1537327478,16565,0.00005293,1537362000
607,29495774,760175,1537327014,1889.29,0.00005293,1537362000
608,29495775,760175,1537327014,7795.71,0.00005293,1537362000
609,29492062,760175,1537324801,332.14,0.00005299,1537362000
610,29425966,760175,1537280732,43479.24,0.000053,1537362000
611,29425871,760175,1537280693,9041.51,0.000053,1537362000
612,29425442,760175,1537280444,9485.87,0.00005271,1537362000
613,29382843,760175,1537254626,6393.65,0.0000495,1537362000
614,56307,760482,1537240441,57943.84,0,1537362000
615,29515827,760882,1537339053,3000,0.000053,1537362000
616,29444327,762715,1537292451,3500,0.0000535,1537362000
617,29435489,762715,1537286654,6500,0.000053,1537362000
618,29418761,763747,1537276616,41302.26,0.000053,1537362000
619,29466365,763750,1537307815,7341.74,0.00005308,1537362000
620,29433615,763864,1537285439,14648.08,0.000053,1537362000
621,29432096,763864,1537284504,8002,0.00005293,1537362000
622,29431504,763864,1537284136,2,0.00005293,1537362000
623,29519475,764689,1537341125,3161.31,0.00005077,1537362000
624,29515363,765514,1537338790,5000,0.00005316,1537362000
625,29515267,765514,1537338725,20000,0.00005316,1537362000
626,29426407,765591,1537280993,1890.35,0.0000529,1537362000
627,29555725,766366,1537361939,3000,0.0000535,1537362000
628,29463159,767130,1537305508,21019.43,0.0000535,1537362000
629,29533686,767435,1537349489,3382.41,0.00005081,1537362000
630,29533687,767435,1537349489,11617.59,0.00005081,1537362000
631,29533598,767435,1537349444,8174.73,0.00005082,1537362000
632,29533596,767435,1537349442,11825.27,0.00005082,1537362000
633,29533542,767435,1537349421,1031,0.00005089,1537362000
634,29533543,767435,1537349421,666,0.00005089,1537362000
635,29533544,767435,1537349421,13303,0.000051,1537362000
636,29529367,767435,1537346913,27780,0.0000501,1537362000
637,29421545,767435,1537278161,30000,0.00005165,1537362000
638,29416791,767435,1537275433,37000,0.000053,1537362000
639,29414725,767435,1537274142,78888,0.00005248,1537362000
640,29414080,767435,1537273723,53550,0.0000525,1537362000
641,29413982,767435,1537273666,63209.77,0.0000525,1537362000
642,29413983,767435,1537273666,10340.23,0.0000525,1537362000
643,29413895,767435,1537273615,50000,0.0000525,1537362000
644,29406653,767435,1537269006,30000,0.0000515,1537362000
645,29406371,767435,1537268852,30000,0.0000515,1537362000
646,29401269,767435,1537265868,40000,0.00005,1537362000
647,29389749,767435,1537258836,8900,0.00004824,1537362000
648,29389409,767435,1537258621,10000,0.000048,1537362000
649,29389019,767435,1537258379,19681.89,0.00004767,1537362000
650,29388869,767435,1537258279,25600,0.00004801,1537362000
651,29388847,767435,1537258262,20000,0.00004856,1537362000
652,29386877,767435,1537257050,4400,0.00004801,1537362000
653,29386544,767435,1537256892,20000,0.00004909,1537362000
654,29386497,767435,1537256861,30000,0.00004928,1537362000
655,29385911,767435,1537256484,4322,0.00004998,1537362000
656,29385771,767435,1537256419,25678,0.00004998,1537362000
657,29384789,767435,1537255780,10000,0.00004951,1537362000
658,29553289,768209,1537360581,7500.34,0.0000535,1537362000
659,29553290,768209,1537360581,839.66,0.0000535,1537362000
660,29521459,768552,1537342247,2661.59,0.000051,1537362000
661,29394880,768552,1537261993,5406.53,0.00004904,1537362000
662,29394152,768552,1537261563,4.98,0.00004814,1537362000
663,29427374,768593,1537281586,297.44,0.00005231,1537362000
664,29427273,768593,1537281533,971.89,0.0000529,1537362000
665,29427274,768593,1537281533,502.08,0.0000529,1537362000
666,29506432,768876,1537333453,12000,0.00005319,1537362000
667,29506398,768876,1537333424,5000,0.00005319,1537362000
668,29505772,768876,1537333036,1000,0.00005311,1537362000
669,29505237,768876,1537332715,2000,0.000053,1537362000
670,29528366,770164,1537346381,920,0.00005051,1537362000
671,29394103,770164,1537261534,4.02,0.00004815,1537362000
672,29465036,772053,1537306863,1644,0.0000535,1537362000
673,29477454,773624,1537316006,100.79,0.000052,1537362000
674,29480041,774445,1537317585,5000,0.00005296,1537362000
675,29506783,775716,1537333651,1087.87,0.00005319,1537362000
676,29553763,775872,1537360829,1000,0.0000535,1537362000
677,29479402,775967,1537317200,7252.15,0.00005284,1537362000
678,29417169,775967,1537275658,4332,0.000053,1537362000
679,29412529,775967,1537272804,5000,0.0000519,1537362000
680,29517348,776011,1537339920,2502.4,0.00005195,1537362000
681,29393594,9025,1537261222,3000,0.00004834,1537362000
682,29386860,12462,1537257039,300,0.00004802,1537362000
683,56306,55001,1537240345,400,0,1537362000
684,56303,55001,1537239926,800,0,1537362000
685,56300,55001,1537238010,400,0,1537362000
686,56297,55001,1537237937,1600,0,1537362000
687,56295,55001,1537237165,2000,0,1537362000
688,29406320,193174,1537268818,345429.06,0.0000515,1537362000
689,29406321,193174,1537268818,4570.94,0.0000515,1537362000
690,29403260,193174,1537267036,45985.5,0.00005049,1537362000
691,29401220,193174,1537265840,454014.5,0.00005,1537362000
692,29401279,216682,1537265877,21572.89,0.00005,1537362000
693,29383578,233214,1537255070,11113.34,0.00004998,1537362000
694,29383540,233214,1537255048,7450,0.00004998,1537362000
695,29381932,359747,1537254137,3185.29,0.00004701,1537362000
696,29386498,412998,1537256861,3367.67,0.00004927,1537362000
697,29385163,412998,1537256014,10000,0.00004927,1537362000
698,29385107,412998,1537255983,36427.98,0.00004927,1537362000
699,29385004,412998,1537255910,22867.35,0.00004927,1537362000
700,56293,412998,1537189219,1000000,0,1537362000
701,29382237,425364,1537254327,561.56,0.000048,1537362000
702,29382238,425364,1537254327,7054.44,0.000048,1537362000
703,29413975,457156,1537273660,38095.23,0.0000525,1537362000
704,29386535,458262,1537256892,9414.33,0.00004922,1537362000
705,29386505,458262,1537256861,7917.95,0.00004922,1537362000
706,29383887,458262,1537255269,10171.41,0.00004922,1537362000
707,29383734,458262,1537255161,7160.86,0.00004922,1537362000
708,29383639,458262,1537255104,34454.54,0.00004952,1537362000
709,29413042,585125,1537273121,39412.17,0.000052,1537362000
710,29413043,585125,1537273121,25400,0.000052,1537362000
711,29413044,585125,1537273121,70000,0.00005219,1537362000
712,29413045,585125,1537273121,18560,0.00005237,1537362000
713,29412727,585125,1537272934,9877.63,0.0000519,1537362000
714,29412728,585125,1537272934,122.37,0.000052,1537362000
715,29383611,608838,1537255090,28016.81,0.00004997,1537362000
716,29382017,619569,1537254203,385,0.000048,1537362000
717,56298,756653,1537237970,0.00999999,0,1537362000
718,29407614,761127,1537269624,20413.36,0.0000515,1537362000
719,29406654,761127,1537269006,120101.2,0.0000515,1537362000
720,29389613,761127,1537258746,300,0.000048,1537362000
721,29388870,762733,1537258279,140147.55,0.000048,1537362000
722,29382294,762733,1537254360,4702.74,0.000048,1537362000
723,29382295,762733,1537254360,2939.29,0.000048,1537362000
724,29400930,764042,1537265659,5015.04,0.0000498,1537362000
725,29399889,764210,1537264976,1152.41,0.00004887,1537362000
726,29399803,764210,1537264886,1174,0.00004887,1537362000
727,29402620,766424,1537266689,28500,0.000051,1537362000
728,29403130,766796,1537266981,4575.5,0.000051,1537362000
729,29402558,766796,1537266653,177.91,0.00005074,1537362000
730,29399009,766796,1537264455,2572.9,0.00004867,1537362000
731,29385261,767212,1537256077,5180,0.0000498,1537362000
732,29410831,767260,1537271740,10645,0.0000519,1537362000
733,29410832,767260,1537271740,4610.76,0.000052,1537362000
734,29416316,769698,1537275165,2000,0.000053,1537362000
735,29416140,769698,1537275019,6398.01,0.000053,1537362000
736,29407868,769698,1537269803,545,0.000052,1537362000
737,29407781,769698,1537269711,5862,0.00005199,1537362000
738,29406362,769698,1537268846,17444.66,0.0000515,1537362000
739,29381937,769757,1537254140,8048.96,0.000046,1537362000
740,29381752,769757,1537254039,23714.08,0.000046,1537362000
741,29383608,771610,1537255090,3130.02,0.00004997,1537362000
742,29383610,771610,1537255090,3662.69,0.00004997,1537362000
743,29383520,771610,1537255033,6379.5,0.00004997,1537362000
744,29383506,771610,1537255026,1478.57,0.00004997,1537362000
745,29411982,771843,1537272418,1133.2,0.0000519,1537362000
746,29390282,772254,1537259141,300,0.00004853,1537362000
747,29382614,772784,1537254526,300,0.0000495,1537362000
748,29385218,772970,1537256046,1002,0.0000499,1537362000
749,29386108,774053,1537256602,1190.84,0.00004995,1537362000
750,29385912,774053,1537256484,2879.99,0.00004995,1537362000
751,29385727,774053,1537256401,5839,0.00004995,1537362000
752,29382040,774053,1537254216,4270.83,0.000048,1537362000
753,29386110,774427,1537256605,7470.98,0.00004995,1537362000
754,29406991,774635,1537269236,690.08,0.000052,1537362000
755,29406967,774635,1537269215,17825,0.00005198,1537362000
756,29406968,774635,1537269215,78195.62,0.000052,1537362000
757,29381689,774949,1537254018,26109.63,0.000045,1537362000
758,29401225,775810,1537265844,9998.08,0.00005,1537362000
759,29382575,775816,1537254505,300,0.0000495,1537362000
760,29385003,775863,1537255910,44029.48,0.00004951,1537362000
761,29383404,775896,1537254977,29.78,0.00004997,1537362000
762,29383405,775896,1537254977,2571.78,0.00004997,1537362000";
	}

        string weight = @"[0] => Array
        (
            [sUserID] => 105554[dWeight] => 33.26819616
        )

    [1] => Array
        (
            [sUserID] => 218705[dWeight] => 0.00004950
        )

    [2] => Array
        (
            [sUserID] => 618557[dWeight] => 0.91208564
        )

    [3] => Array
        (
            [sUserID] => 674389[dWeight] => 3.87932223
        )

    [4] => Array
        (
            [sUserID] => 760171[dWeight] => 10.91050657
        )

    [5] => Array
        (
            [sUserID] => 775967[dWeight] => 0.25950000
        )

    [6] => Array
        (
            [sUserID] => 9025[dWeight] => 0.14502000
        )

    [7] => Array
        (
            [sUserID] => 12462[dWeight] => 0.01440600
        )

    [8] => Array
        (
            [sUserID] => 193174[dWeight] => 43.04753289
        )

    [9] => Array
        (
            [sUserID] => 216682[dWeight] => 1.07864450
        )

    [10] => Array
        (
            [sUserID] => 233214[dWeight] => 0.92779573
        )

    [11] => Array
        (
            [sUserID] => 241241[dWeight] => 3.04950000
        )

    [12] => Array
        (
            [sUserID] => 359747[dWeight] => 0.14974048
        )

    [13] => Array
        (
            [sUserID] => 412998[dWeight] => 3.58010600
        )

    [14] => Array
        (
            [sUserID] => 425364[dWeight] => 0.36556800
        )

    [15] => Array
        (
            [sUserID] => 457156[dWeight] => 1.99999957
        )

    [16] => Array
        (
            [sUserID] => 458262[dWeight] => 3.41237795
        )

    [17] => Array
        (
            [sUserID] => 569685[dWeight] => 2.48768542
        )

    [18] => Array
        (
            [sUserID] => 585125[dWeight] => 8.51453227
        )

    [19] => Array
        (
            [sUserID] => 608838[dWeight] => 1.39999999
        )

    [20] => Array
        (
            [sUserID] => 619569[dWeight] => 0.01848000
        )

    [21] => Array
        (
            [sUserID] => 741423[dWeight] => 0.50257676
        )

    [22] => Array
        (
            [sUserID] => 759050[dWeight] => 0.07239952
        )

    [23] => Array
        (
            [sUserID] => 759908[dWeight] => 2.00028566
        )

    [24] => Array
        (
            [sUserID] => 759952[dWeight] => 9.75970000
        )

    [25] => Array
        (
            [sUserID] => 760175[dWeight] => 0.31648567
        )

    [26] => Array
        (
            [sUserID] => 761127[dWeight] => 7.25089984
        )

    [27] => Array
        (
            [sUserID] => 762733[dWeight] => 7.09389984
        )

    [28] => Array
        (
            [sUserID] => 764042[dWeight] => 0.24974899
        )

    [29] => Array
        (
            [sUserID] => 764210[dWeight] => 0.11369165
        )

    [30] => Array
        (
            [sUserID] => 766424[dWeight] => 1.45350000
        )

    [31] => Array
        (
            [sUserID] => 766796[dWeight] => 0.36760069
        )

    [32] => Array
        (
            [sUserID] => 767212[dWeight] => 0.25796400
        )

    [33] => Array
        (
            [sUserID] => 767260[dWeight] => 0.79223502
        )

    [34] => Array
        (
            [sUserID] => 767435[dWeight] => 29.20256392
        )

    [35] => Array
        (
            [sUserID] => 768552[dWeight] => 0.26537596
        )

    [36] => Array
        (
            [sUserID] => 769698[dWeight] => 1.67659990
        )

    [37] => Array
        (
            [sUserID] => 769757[dWeight] => 1.46109984
        )

    [38] => Array
        (
            [sUserID] => 770164[dWeight] => 0.04449156
        )

    [39] => Array
        (
            [sUserID] => 771610[dWeight] => 0.73209945
        )

    [40] => Array
        (
            [sUserID] => 771843[dWeight] => 0.05881308
        )

    [41] => Array
        (
            [sUserID] => 772254[dWeight] => 0.01455900
        )

    [42] => Array
        (
            [sUserID] => 772784[dWeight] => 0.01485000
        )

    [43] => Array
        (
            [sUserID] => 772970[dWeight] => 0.04999980
        )

    [44] => Array
        (
            [sUserID] => 774053[dWeight] => 0.69999584
        )

    [45] => Array
        (
            [sUserID] => 774427[dWeight] => 0.37317545
        )

    [46] => Array
        (
            [sUserID] => 774635[dWeight] => 5.02859990
        )

    [47] => Array
        (
            [sUserID] => 774949[dWeight] => 1.17493335
        )

    [48] => Array
        (
            [sUserID] => 775810[dWeight] => 0.49990400
        )

    [49] => Array
        (
            [sUserID] => 775816[dWeight] => 0.01485000
        )

    [50] => Array
        (
            [sUserID] => 775863[dWeight] => 2.17989955
        )

    [51] => Array
        (
            [sUserID] => 775896[dWeight] => 0.12999994
        )";



}
